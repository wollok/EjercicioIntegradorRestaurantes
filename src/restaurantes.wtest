import restaurantes.*

describe "Tests de comidas"{
	var deglutidorBuenaOnda = new Deglutidor( dinero = 1500, platos = 21, auto =true)
	var criticoBuenaOnda = new Critico(dinero = 1500,platos = 2,horasTele = 40)
	var deglutidorMalaOnda = new Deglutidor(dinero = 2000,platos  = 21,auto = false)
	var criticoPocaPlata = new Critico(dinero = 150, platos = 2, horasTele = 20)
	
	
	var chefProfesor = new Chef()
	var chefFamoso = new Chef()
	var uruguay = new Lugar()
	
	var ravioli = new Plato(nombre="Ravioli",costo = 60)
	var pasta = new Plato(nombre="Pasta",costo = 140)
	var cazuela = new Plato(nombre="cazuela",costo = 40)
	var carne = new Plato(nombre="Carne",costo = 5)
	var ratatouille = new Plato(nombre="Ratatouille", costo = 200)
	
	var restComun = new Restaurante(carta = [ravioli,pasta,carne],tenedores = 4,chef = chefProfesor)
	var restEtnico = new RestauranteEtnico(carta = [ratatouille],tenedores = 1,chef = chefFamoso,lugar = uruguay)
	var bodegon = new Bodegon(carta = [cazuela,ravioli,pasta]) 
	
	var giraCara = new Gira(costoEstimado = 1000)
	var giraBarata = new Gira(costoEstimado = 100)
	
	fixture{
		escuela.agregarEstudiante(deglutidorMalaOnda) 
		escuela.agregarEstudiante(deglutidorBuenaOnda)
		escuela.agregarEstudiante(criticoBuenaOnda)
		escuela.agregarEstudiante(criticoPocaPlata)
		escuela.agregarProfesor(chefProfesor)
		giraCara.agregarLugar(restEtnico)
		giraBarata.agregarLugar(restComun)
		giraBarata.agregarLugar(bodegon)
			
	}
	
	method sumarGiraCara(){
		giraCara.sumarA(deglutidorBuenaOnda)
		giraCara.sumarA(criticoBuenaOnda)
	}
	method sumarGiraBarata(){
		giraBarata.sumarA(deglutidorBuenaOnda)
		giraBarata.sumarA(criticoPocaPlata)
	}
    test "Puedo agregar deglutidor buena onda con plata a la gira cara"{
    	giraCara.sumarA(deglutidorBuenaOnda)
    	assert.that(giraCara.personas().contains(deglutidorBuenaOnda))
    }
    test "Puedo agregar critico buena onda con plata a la gira cara"{
    	giraCara.sumarA(criticoBuenaOnda)
    	assert.that(giraCara.personas().contains(criticoBuenaOnda))
    }
     test "No puedo agregar a deglutidor mala onda a la gira cara"{
    	assert.throwsExceptionLike(new NoPuedeIrDeGira(), { giraCara.sumarA(deglutidorMalaOnda)})
    }
    test "Puedo agregar critico poca plata a la gira barata"{
    	giraBarata.sumarA(criticoPocaPlata)
    	assert.that(giraBarata.personas().contains(criticoPocaPlata))
    }
     test "No puedo agregar critico poca plata a la gira cara"{
    	assert.throwsExceptionLike(new NoPuedeIrDeGira(), { giraCara.sumarA(criticoPocaPlata)})
    }
	test "Restaurante comun vale la pena para la giraBarata"{
    	self.sumarGiraBarata() 
		assert.that(restComun.valeLaPena(giraBarata))
	}
	test "Bodegon vale la pena para la giraBarata"{
    	self.sumarGiraBarata() 
		assert.that(restComun.valeLaPena(bodegon))
	}
	test "Restaurante etnico no vale la pena para la giraCara"{
    	self.sumarGiraCara() 
		assert.notThat(restEtnico.valeLaPena(giraCara))
	}
	
    test "Gira Cara no vale la pena"{
    	self.sumarGiraCara() 
    	assert.notThat(giraCara.valeLaPena())
    }
    test "Gira Barata vale la pena"{
    	self.sumarGiraBarata() 
    	assert.that(giraBarata.valeLaPena())
    }
    test "Critico poca plata gasta 50$ y 100$ en la gira barata y se queda sin plata"{
    	self.sumarGiraBarata()
    	giraBarata.realizar()
    	assert.equals(0, criticoPocaPlata.dinero())
    }
	
    test "Critico poca plata principiante sin giras categoriza sigue principiante"{
    	criticoPocaPlata.recategorizar()
    	assert.equals(principiante,criticoPocaPlata.categoria())
    }
    test "Critico poca plata principiante hace gira, categoriza y pasa a clasico"{
    	self.sumarGiraBarata()
    	giraBarata.realizar()
    	criticoPocaPlata.recategorizar()
    	assert.equals(clasico,criticoPocaPlata.categoria())
    }
    
    test "Critico poca plata principiante hace gira, categoriza y aumenta horas"{
    	self.sumarGiraBarata()
    	giraBarata.realizar()
    	criticoPocaPlata.recategorizar()
    	assert.equals(22,criticoPocaPlata.horasTele())
    }
    test "Critico poca plata principiante hace gira, categoriza dos veces, pero queda en clasico por no ser buena onda"{
    	self.sumarGiraBarata()
    	giraBarata.realizar()
    	criticoPocaPlata.recategorizar()
    	criticoPocaPlata.recategorizar()
    	assert.equals(clasico,criticoPocaPlata.categoria())
    }
    test "Deglutidor buena onda principiante hace gira, categoriza dos veces, y se hace experto"{
    	self.sumarGiraBarata()
    	giraBarata.realizar()
    	deglutidorBuenaOnda.recategorizar()
    	deglutidorBuenaOnda.recategorizar()
    	assert.equals(experto,deglutidorBuenaOnda.categoria())
    }

}